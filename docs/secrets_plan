

Implementation Steps
Create the .env.example file with placeholders for all secrets
Add .env to your  .gitignore (already done)
Create a local .env file for development (not committed)
Update the Supabase client to use the environment variables
Create the environment config module for centralized access
Update the Vite config to handle environment variables
Update Supabase Edge Functions to use environment variables securely
Create deployment documentation for Vercel setup
Set up the environment variables in Vercel dashboard during deployment
This approach addresses the security issues by:

Moving authentication tokens to HttpOnly cookies (addressing XSS vulnerability)
Centralizing API endpoint configuration
Providing a structured way to manage environment variables
Creating clear documentation for deployment





Based on the security checklist and other documentation, I'll outline a plan to properly manage secrets and API endpoints for your T-shirt design app deployment to Vercel.

Security Issue Context
From your security checklist, I can see you have some good practices in place:

✅ No API keys or secrets pushed to Git
✅ .env files ignored via  .gitignore
✅ Vercel environment variables scoped to project and team
However, there are issues with how authentication tokens are stored and API calls are scoped.

Plan to Extract and Manage Secrets
1. Create Environment Files Structure (env.example)

# Supabase Configuration
SUPABASE_URL=your_supabase_url_here
SUPABASE_ANON_KEY=your_supabase_anon_key_here
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key_here

# Authentication Settings
AUTH_COOKIE_SECURE=true
AUTH_COOKIE_SAME_SITE=lax
AUTH_COOKIE_DOMAIN=your_domain.com

# API Endpoints
API_WEBHOOK_URL=https://n8.wikischool.com/webhook/generate-image

# Feature Flags
USE_MOCK_IMAGE=false

# Security Settings
ENABLE_RATE_LIMITING=true
CORS_ALLOWED_ORIGINS=https://your-app.vercel.app,https://your-domain.com


2. Update Supabase Client (client.ts)
src/integrations/supabase

import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables from import.meta.env (Vite's approach)
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Missing Supabase environment variables');
}

export const supabase = createClient<Database>(
  supabaseUrl,
  supabaseAnonKey
);



3. Create Environment Config Module (env.ts)
src/config
// Central place to access all environment variables
// This helps with type safety and prevents typos

interface EnvConfig {
  supabase: {
    url: string;
    anonKey: string;
  };
  auth: {
    cookieSecure: boolean;
    cookieSameSite: 'strict' | 'lax' | 'none';
    cookieDomain: string;
  };
  api: {
    webhookUrl: string;
  };
  features: {
    useMockImage: boolean;
  };
  security: {
    enableRateLimiting: boolean;
    corsAllowedOrigins: string[];
  };
}

// Parse environment variables with validation
export const env: EnvConfig = {
  supabase: {
    url: import.meta.env.VITE_SUPABASE_URL || '',
    anonKey: import.meta.env.VITE_SUPABASE_ANON_KEY || '',
  },
  auth: {
    cookieSecure: import.meta.env.VITE_AUTH_COOKIE_SECURE === 'true',
    cookieSameSite: (import.meta.env.VITE_AUTH_COOKIE_SAME_SITE || 'lax') as 'strict' | 'lax' | 'none',
    cookieDomain: import.meta.env.VITE_AUTH_COOKIE_DOMAIN || '',
  },
  api: {
    webhookUrl: import.meta.env.VITE_API_WEBHOOK_URL || '',
  },
  features: {
    useMockImage: import.meta.env.VITE_USE_MOCK_IMAGE === 'true',
  },
  security: {
    enableRateLimiting: import.meta.env.VITE_ENABLE_RATE_LIMITING === 'true',
    corsAllowedOrigins: (import.meta.env.VITE_CORS_ALLOWED_ORIGINS || '').split(','),
  }
};

// Helper function to validate required env vars
export function validateEnv() {
  const missing: string[] = [];
  
  if (!env.supabase.url) missing.push('VITE_SUPABASE_URL');
  if (!env.supabase.anonKey) missing.push('VITE_SUPABASE_ANON_KEY');
  
  if (missing.length > 0) {
    console.error(`Missing required environment variables: ${missing.join(', ')}`);
    return false;
  }
  
  return true;
}


4. Update Vite Config for Environment Variables (vite.config.ts)

import { defineConfig, loadEnv } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  // Load env file based on mode
  const env = loadEnv(mode, process.cwd(), '');
  
  return {
    server: {
      host: "::",
      port: 8080,
    },
    plugins: [
      react(),
      mode === 'development' && componentTagger(),
    ].filter(Boolean),
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "./src"),
      },
    },
    // Define environment variables to expose to the client
    define: {
      'import.meta.env.VITE_SUPABASE_URL': JSON.stringify(env.SUPABASE_URL),
      'import.meta.env.VITE_SUPABASE_ANON_KEY': JSON.stringify(env.SUPABASE_ANON_KEY),
      // Add other variables as needed, but be careful not to expose sensitive keys
    }
  };
});


5. Update Supabase Edge Function (index.ts)
supabase/functions/generate-ai-design


// Update the getEnvVariable function to be more robust
function getEnvVariable(key: string, required = false): string {
  // Try to get from Deno.env first
  let value = Deno.env.get(key);
  
  // If not found and required, throw error
  if (required && !value) {
    console.error(`❌ Required environment variable ${key} is missing`);
    throw new Error(`Required environment variable ${key} is missing`);
  }
  
  // Log successful retrieval without exposing the actual value
  if (value) {
    console.log(`✅ Environment variable ${key} retrieved successfully`);
  }
  
  return value || '';
}

// Then use this function consistently throughout the code
// Example:
// const supabaseUrl = getEnvVariable('SUPABASE_URL', true);
// const webhookUrl = getEnvVariable('API_WEBHOOK_URL', true);

6. Create Deployment Instructions
docs
# Deployment Guide

## Environment Variables Setup for Vercel

When deploying to Vercel, you need to configure the following environment variables:

### Required Variables
- `SUPABASE_URL`: Your Supabase project URL
- `SUPABASE_ANON_KEY`: Your Supabase anonymous key (public)
- `SUPABASE_SERVICE_ROLE_KEY`: Your Supabase service role key (private, server-only)

### Authentication Settings
- `AUTH_COOKIE_SECURE`: Set to "true" for production
- `AUTH_COOKIE_SAME_SITE`: Set to "lax" or "strict"
- `AUTH_COOKIE_DOMAIN`: Your domain name

### API Endpoints
- `API_WEBHOOK_URL`: URL for the image generation webhook

### Feature Flags
- `USE_MOCK_IMAGE`: Set to "false" for production

### Security Settings
- `ENABLE_RATE_LIMITING`: Set to "true" for production
- `CORS_ALLOWED_ORIGINS`: Comma-separated list of allowed origins

## Setting Up in Vercel Dashboard

1. Go to your project in the Vercel dashboard
2. Navigate to "Settings" > "Environment Variables"
3. Add each variable from your `.env` file
4. Ensure you set the appropriate scope for each variable (Production/Preview/Development)
5. For sensitive variables, mark them as "Production only"

## Supabase Edge Functions Deployment

For Supabase Edge Functions, you need to set environment variables in the Supabase dashboard:

1. Go to your Supabase project
2. Navigate to "Settings" > "API"
3. Under "Edge Functions", add the required environment variables
4. Deploy your edge functions using the Supabase CLI:

```bash
supabase functions deploy generate-ai-design
```

## Security Considerations

- Never commit `.env` files to your repository
- Use different keys for development and production
- Regularly rotate your API keys
- Limit the permissions of your service role key to only what's necessary


